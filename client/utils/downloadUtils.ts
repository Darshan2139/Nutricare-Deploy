import { User } from "@shared/types";

export interface ReportData {
  user: User;
  generatedDate: string;
  reportType: "diet-plan" | "health-summary" | "progress-report";
  data: any;
}

export function downloadReport(
  reportData: ReportData,
  format: "json" | "pdf" = "json",
) {
  if (format === "json") {
    downloadJSON(reportData);
  } else {
    downloadPDF(reportData);
  }
}

function downloadJSON(reportData: ReportData) {
  const dataStr = JSON.stringify(reportData, null, 2);
  const dataBlob = new Blob([dataStr], { type: "application/json" });
  const url = URL.createObjectURL(dataBlob);

  const link = document.createElement("a");
  link.href = url;
  link.download = `nutricare-${reportData.reportType}-${reportData.generatedDate}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);

  URL.revokeObjectURL(url);
}

function downloadPDF(reportData: ReportData) {
  // Create a simple HTML content for PDF generation
  const htmlContent = generateHTMLReport(reportData);

  // Create a new window for printing
  const printWindow = window.open("", "_blank");
  if (printWindow) {
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    printWindow.print();
  }
}

function generateHTMLReport(reportData: ReportData): string {
  return `
    <!DOCTYPE html>
    <html>
      <head>
        <title>NutriCare Report - ${reportData.reportType}</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
            color: #333;
            line-height: 1.6;
          }
          .header {
            text-align: center;
            margin-bottom: 40px;
            border-bottom: 2px solid #f43f5e;
            padding-bottom: 20px;
          }
          .logo {
            font-size: 24px;
            font-weight: bold;
            color: #f43f5e;
            margin-bottom: 10px;
          }
          .user-info {
            background: #fdf2f8;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
          }
          .section {
            margin-bottom: 30px;
          }
          .section h2 {
            color: #be185d;
            border-bottom: 1px solid #fce7f3;
            padding-bottom: 10px;
          }
          .meal-item {
            background: #f9fafb;
            padding: 15px;
            margin: 10px 0;
            border-radius: 6px;
            border-left: 4px solid #f43f5e;
          }
          .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
            color: #6b7280;
          }
          @media print {
            body { margin: 0; padding: 20px; }
            .no-print { display: none; }
          }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="logo">❤️ NutriCare</div>
          <h1>${reportData.reportType.replace("-", " ").toUpperCase()}</h1>
          <p>Generated on ${new Date(reportData.generatedDate).toLocaleDateString()}</p>
        </div>

        <div class="user-info">
          <h2>User Information</h2>
          <p><strong>Name:</strong> ${reportData.user.name}</p>
          <p><strong>Email:</strong> ${reportData.user.email}</p>
          <p><strong>Status:</strong> ${reportData.user.role === "pregnant" ? "Expecting Mother" : "Lactating Mother"}</p>
        </div>

        ${generateReportContent(reportData)}

        <div class="footer">
          <p>This report was generated by NutriCare - Personalized Nutrition for Mothers</p>
          <p>For medical advice, please consult with your healthcare provider.</p>
        </div>
      </body>
    </html>
  `;
}

function generateReportContent(reportData: ReportData): string {
  switch (reportData.reportType) {
    case "diet-plan":
      return generateDietPlanContent(reportData.data);
    case "health-summary":
      return generateHealthSummaryContent(reportData.data);
    case "progress-report":
      return generateProgressReportContent(reportData.data);
    default:
      return "<p>No content available for this report type.</p>";
  }
}

function generateDietPlanContent(data: any): string {
  if (!data || !data.weeklyPlan) {
    return "<p>No diet plan data available.</p>";
  }

  return `
    <div class="section">
      <h2>Weekly Diet Plan</h2>
      ${data.weeklyPlan
        .map(
          (day: any) => `
        <div class="meal-item">
          <h3>${day.day}</h3>
          <p><strong>Total Calories:</strong> ${day.totalCalories}</p>
          ${day.meals
            .map(
              (meal: any) => `
            <div style="margin: 10px 0; padding: 10px; background: white; border-radius: 4px;">
              <strong>${meal.type.toUpperCase()}</strong> (${meal.time})<br>
              ${meal.name} - ${meal.calories} calories<br>
              <em>Ingredients:</em> ${meal.ingredients.join(", ")}
            </div>
          `,
            )
            .join("")}
        </div>
      `,
        )
        .join("")}
    </div>
  `;
}

function generateHealthSummaryContent(data: any): string {
  return `
    <div class="section">
      <h2>Health Summary</h2>
      <p>This section would contain health metrics, vital signs, and medical history.</p>
    </div>
  `;
}

function generateProgressReportContent(data: any): string {
  return `
    <div class="section">
      <h2>Progress Report</h2>
      <p>This section would contain progress tracking, goal achievements, and recommendations.</p>
    </div>
  `;
}

export function downloadDietPlan(user: User, weeklyPlan: any) {
  const reportData: ReportData = {
    user,
    generatedDate: new Date().toISOString().split("T")[0],
    reportType: "diet-plan",
    data: { weeklyPlan },
  };

  downloadReport(reportData, "json");
}

export function downloadHealthSummary(user: User, healthData: any) {
  const reportData: ReportData = {
    user,
    generatedDate: new Date().toISOString().split("T")[0],
    reportType: "health-summary",
    data: healthData,
  };

  downloadReport(reportData, "json");
}

export function downloadProgressReport(user: User, progressData: any) {
  const reportData: ReportData = {
    user,
    generatedDate: new Date().toISOString().split("T")[0],
    reportType: "progress-report",
    data: progressData,
  };

  downloadReport(reportData, "json");
}
